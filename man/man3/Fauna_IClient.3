.TH "Fauna.IClient" 3 "Version 0.4.0-beta" "Fauna v10 .NET/C# Driver" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Fauna.IClient \- Represents a client for interacting with a \fBFauna\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBFauna\&.BaseClient\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "Task< \fBQuerySuccess\fP< T > > \fBQueryAsync< T >\fP (\fBQuery\fP query, \fBQueryOptions\fP? queryOptions=null, CancellationToken cancel=default)"
.br
.RI "Asynchronously executes a specified FQL query against the \fBFauna\fP database and returns the typed result\&. "
.ti -1c
.RI "Task< \fBQuerySuccess\fP< object?> > \fBQueryAsync\fP (\fBQuery\fP query, \fBQueryOptions\fP? queryOptions=null, CancellationToken cancel=default)"
.br
.RI "Asynchronously executes a specified FQL query against the \fBFauna\fP database\&. "
.ti -1c
.RI "Task< \fBQuerySuccess\fP< T > > \fBQueryAsync< T >\fP (\fBQuery\fP query, \fBISerializer\fP< T > serializer, \fBQueryOptions\fP? queryOptions=null, CancellationToken cancel=default)"
.br
.RI "Asynchronously executes a specified FQL query against the \fBFauna\fP database and returns the typed result\&. "
.ti -1c
.RI "Task< \fBQuerySuccess\fP< object?> > \fBQueryAsync\fP (\fBQuery\fP query, \fBISerializer\fP serializer, \fBQueryOptions\fP? queryOptions=null, CancellationToken cancel=default)"
.br
.RI "Asynchronously executes a specified FQL query against the \fBFauna\fP database and returns the typed result\&. "
.ti -1c
.RI "IAsyncEnumerable< Page< T > > \fBPaginateAsync< T >\fP (\fBQuery\fP query, \fBQueryOptions\fP? queryOptions=null, CancellationToken cancel=default)"
.br
.RI "Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. "
.ti -1c
.RI "IAsyncEnumerable< Page< T > > \fBPaginateAsync< T >\fP (Page< T > page, \fBQueryOptions\fP? queryOptions=null, CancellationToken cancel=default)"
.br
.RI "Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. The provided page is the first page yielded\&. "
.ti -1c
.RI "IAsyncEnumerable< Page< object?> > \fBPaginateAsync\fP (\fBQuery\fP query, \fBQueryOptions\fP? queryOptions=null, CancellationToken cancel=default)"
.br
.RI "Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. "
.ti -1c
.RI "IAsyncEnumerable< Page< object?> > \fBPaginateAsync\fP (Page< object?> page, \fBQueryOptions\fP? queryOptions=null, CancellationToken cancel=default)"
.br
.RI "Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. The provided page is the first page yielded\&. "
.ti -1c
.RI "IAsyncEnumerable< Page< T > > \fBPaginateAsync< T >\fP (\fBQuery\fP query, \fBISerializer\fP< T > elemSerializer, \fBQueryOptions\fP? queryOptions=null, CancellationToken cancel=default)"
.br
.RI "Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. "
.ti -1c
.RI "IAsyncEnumerable< Page< T > > \fBPaginateAsync< T >\fP (Page< T > page, \fBISerializer\fP< T > elemSerializer, \fBQueryOptions\fP? queryOptions=null, CancellationToken cancel=default)"
.br
.RI "Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. The provided page is the first page yielded\&. "
.ti -1c
.RI "IAsyncEnumerable< Page< object?> > \fBPaginateAsync\fP (\fBQuery\fP query, \fBISerializer\fP elemSerializer, \fBQueryOptions\fP? queryOptions=null, CancellationToken cancel=default)"
.br
.RI "Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. "
.ti -1c
.RI "IAsyncEnumerable< Page< object?> > \fBPaginateAsync\fP (Page< object?> page, \fBISerializer\fP elemSerializer, \fBQueryOptions\fP? queryOptions=null, CancellationToken cancel=default)"
.br
.RI "Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. The provided page is the first page yielded\&. "
.ti -1c
.RI "Task< T > \fBLoadRefAsync< T >\fP (\fBBaseRef\fP< T > reference, CancellationToken cancel=default)"
.br
.RI "Asynchronously executes a specified FQL query against the \fBFauna\fP database and returns the typed result\&. "
.in -1c
.SH "Detailed Description"
.PP 
Represents a client for interacting with a \fBFauna\fP\&. 
.PP
Definition at line \fB15\fP of file \fBIClient\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "Task< T > Fauna\&.IClient\&.LoadRefAsync< T > (\fBBaseRef\fP< T > reference, CancellationToken cancel = \fRdefault\fP)"

.PP
Asynchronously executes a specified FQL query against the \fBFauna\fP database and returns the typed result\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP The type of the result expected from the query, corresponding to the structure of the FQL query's expected response\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIreference\fP The reference to load\&.
.br
\fIcancel\fP A cancellation token to use
.RE
.PP
\fBReturns\fP
.RS 4
A Task representing the asynchronous operation, which upon completion contains the result of the query execution as QuerySuccess<T>\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIAuthenticationException\fP Thrown when authentication fails due to invalid credentials or other authentication issues\&.
.br
\fIAuthorizationException\fP Thrown when the client lacks sufficient permissions to execute the query\&.
.br
\fIQueryCheckException\fP Thrown when the query has syntax errors or is otherwise malformed\&.
.br
\fIQueryRuntimeException\fP Thrown when runtime errors occur during query execution, such as invalid arguments or operational failures\&.
.br
\fIAbortException\fP Thrown when the FQL \fRabort\fP function is called within the query, containing the data provided during the abort operation\&.
.br
\fIInvalidRequestException\fP Thrown for improperly formatted requests or requests that \fBFauna\fP cannot process\&.
.br
\fIContendedTransactionException\fP Thrown when a transaction is aborted due to concurrent modification or contention issues\&.
.br
\fIThrottlingException\fP Thrown when the query exceeds established rate limits for the \fBFauna\fP service\&.
.br
\fIQueryTimeoutException\fP Thrown when the query execution time exceeds the specified or default timeout period\&.
.br
\fIServiceException\fP Thrown in response to internal \fBFauna\fP service errors, indicating issues on the server side\&.
.br
\fIFaunaException\fP Thrown for unexpected or miscellaneous errors not covered by the other specific exception types\&.
.br
\fINullDocumentException\fP Thrown when the provided reference does not exist\&.
.RE
.PP

.PP
Implemented in \fBFauna\&.BaseClient\fP\&.
.PP
\fBType Constraints\fP
.TP
\fIT\fP : \fInotnull\fP
.SS "IAsyncEnumerable< Page< object?> > Fauna\&.IClient\&.PaginateAsync (Page< object?> page, \fBISerializer\fP elemSerializer, \fBQueryOptions\fP? queryOptions = \fRnull\fP, CancellationToken cancel = \fRdefault\fP)"

.PP
Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. The provided page is the first page yielded\&. 
.PP
\fBParameters\fP
.RS 4
\fIpage\fP The FQL query object representing the query to be executed against the \fBFauna\fP database\&.
.br
\fIelemSerializer\fP A data serializer for the page element type\&.
.br
\fIqueryOptions\fP Optional parameters to customize the query execution, such as timeout settings and custom headers\&.
.br
\fIcancel\fP A cancellation token to use\&.
.RE
.PP
\fBReturns\fP
.RS 4
A Task representing the asynchronous operation, which upon completion contains the result of the query execution\&.
.RE
.PP

.PP
This method handles pagination by sending multiple requests to \fBFauna\fP as needed, based on the presence of an 'after' cursor in the query results\&. 

.PP
\fBExceptions\fP
.RS 4
\fIAuthenticationException\fP Thrown when authentication fails due to invalid credentials or other authentication issues\&.
.br
\fIAuthorizationException\fP Thrown when the client lacks sufficient permissions to execute the query\&.
.br
\fIQueryCheckException\fP Thrown when the query has syntax errors or is otherwise malformed\&.
.br
\fIQueryRuntimeException\fP Thrown when runtime errors occur during query execution, such as invalid arguments or operational failures\&.
.br
\fIAbortException\fP Thrown when the FQL \fRabort\fP function is called within the query, containing the data provided during the abort operation\&.
.br
\fIInvalidRequestException\fP Thrown for improperly formatted requests or requests that \fBFauna\fP cannot process\&.
.br
\fIContendedTransactionException\fP Thrown when a transaction is aborted due to concurrent modification or contention issues\&.
.br
\fIThrottlingException\fP Thrown when the query exceeds established rate limits for the \fBFauna\fP service\&.
.br
\fIQueryTimeoutException\fP Thrown when the query execution time exceeds the specified or default timeout period\&.
.br
\fIServiceException\fP Thrown in response to internal \fBFauna\fP service errors, indicating issues on the server side\&.
.br
\fIFaunaException\fP Thrown for unexpected or miscellaneous errors not covered by the other specific exception types\&.
.RE
.PP

.PP
Implemented in \fBFauna\&.BaseClient\fP\&.
.SS "IAsyncEnumerable< Page< object?> > Fauna\&.IClient\&.PaginateAsync (Page< object?> page, \fBQueryOptions\fP? queryOptions = \fRnull\fP, CancellationToken cancel = \fRdefault\fP)"

.PP
Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. The provided page is the first page yielded\&. 
.PP
\fBParameters\fP
.RS 4
\fIpage\fP The initial page\&.
.br
\fIqueryOptions\fP Optional parameters to customize the query execution, such as timeout settings and custom headers\&.
.br
\fIcancel\fP A cancellation token to use\&.
.RE
.PP
\fBReturns\fP
.RS 4
An asynchronous enumerable of pages, each containing a list of items\&.
.RE
.PP

.PP
This method handles pagination by sending multiple requests to \fBFauna\fP as needed, based on the presence of an 'after' cursor in the query results\&. 

.PP
\fBExceptions\fP
.RS 4
\fIAuthenticationException\fP Thrown when authentication fails due to invalid credentials or other authentication issues\&.
.br
\fIAuthorizationException\fP Thrown when the client lacks sufficient permissions to execute the query\&.
.br
\fIQueryCheckException\fP Thrown when the query has syntax errors or is otherwise malformed\&.
.br
\fIQueryRuntimeException\fP Thrown when runtime errors occur during query execution, such as invalid arguments or operational failures\&.
.br
\fIAbortException\fP Thrown when the FQL \fRabort\fP function is called within the query, containing the data provided during the abort operation\&.
.br
\fIInvalidRequestException\fP Thrown for improperly formatted requests or requests that \fBFauna\fP cannot process\&.
.br
\fIContendedTransactionException\fP Thrown when a transaction is aborted due to concurrent modification or contention issues\&.
.br
\fIThrottlingException\fP Thrown when the query exceeds established rate limits for the \fBFauna\fP service\&.
.br
\fIQueryTimeoutException\fP Thrown when the query execution time exceeds the specified or default timeout period\&.
.br
\fIServiceException\fP Thrown in response to internal \fBFauna\fP service errors, indicating issues on the server side\&.
.br
\fIFaunaException\fP Thrown for unexpected or miscellaneous errors not covered by the other specific exception types\&.
.RE
.PP

.PP
Implemented in \fBFauna\&.BaseClient\fP\&.
.SS "IAsyncEnumerable< Page< object?> > Fauna\&.IClient\&.PaginateAsync (\fBQuery\fP query, \fBISerializer\fP elemSerializer, \fBQueryOptions\fP? queryOptions = \fRnull\fP, CancellationToken cancel = \fRdefault\fP)"

.PP
Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. 
.PP
\fBParameters\fP
.RS 4
\fIquery\fP The FQL query object representing the query to be executed against the \fBFauna\fP database\&.
.br
\fIelemSerializer\fP A data serializer for the page element type\&.
.br
\fIqueryOptions\fP Optional parameters to customize the query execution, such as timeout settings and custom headers\&.
.br
\fIcancel\fP A cancellation token to use\&.
.RE
.PP
\fBReturns\fP
.RS 4
A Task representing the asynchronous operation, which upon completion contains the result of the query execution\&.
.RE
.PP

.PP
This method handles pagination by sending multiple requests to \fBFauna\fP as needed, based on the presence of an 'after' cursor in the query results\&. 

.PP
\fBExceptions\fP
.RS 4
\fIAuthenticationException\fP Thrown when authentication fails due to invalid credentials or other authentication issues\&.
.br
\fIAuthorizationException\fP Thrown when the client lacks sufficient permissions to execute the query\&.
.br
\fIQueryCheckException\fP Thrown when the query has syntax errors or is otherwise malformed\&.
.br
\fIQueryRuntimeException\fP Thrown when runtime errors occur during query execution, such as invalid arguments or operational failures\&.
.br
\fIAbortException\fP Thrown when the FQL \fRabort\fP function is called within the query, containing the data provided during the abort operation\&.
.br
\fIInvalidRequestException\fP Thrown for improperly formatted requests or requests that \fBFauna\fP cannot process\&.
.br
\fIContendedTransactionException\fP Thrown when a transaction is aborted due to concurrent modification or contention issues\&.
.br
\fIThrottlingException\fP Thrown when the query exceeds established rate limits for the \fBFauna\fP service\&.
.br
\fIQueryTimeoutException\fP Thrown when the query execution time exceeds the specified or default timeout period\&.
.br
\fIServiceException\fP Thrown in response to internal \fBFauna\fP service errors, indicating issues on the server side\&.
.br
\fIFaunaException\fP Thrown for unexpected or miscellaneous errors not covered by the other specific exception types\&.
.RE
.PP

.PP
Implemented in \fBFauna\&.BaseClient\fP\&.
.SS "IAsyncEnumerable< Page< object?> > Fauna\&.IClient\&.PaginateAsync (\fBQuery\fP query, \fBQueryOptions\fP? queryOptions = \fRnull\fP, CancellationToken cancel = \fRdefault\fP)"

.PP
Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. 
.PP
\fBParameters\fP
.RS 4
\fIquery\fP The FQL query object representing the query to be executed against the \fBFauna\fP database\&.
.br
\fIqueryOptions\fP Optional parameters to customize the query execution, such as timeout settings and custom headers\&.
.br
\fIcancel\fP A cancellation token to use\&.
.RE
.PP
\fBReturns\fP
.RS 4
An asynchronous enumerable of pages, each containing a list of items\&.
.RE
.PP

.PP
This method handles pagination by sending multiple requests to \fBFauna\fP as needed, based on the presence of an 'after' cursor in the query results\&. 

.PP
\fBExceptions\fP
.RS 4
\fIAuthenticationException\fP Thrown when authentication fails due to invalid credentials or other authentication issues\&.
.br
\fIAuthorizationException\fP Thrown when the client lacks sufficient permissions to execute the query\&.
.br
\fIQueryCheckException\fP Thrown when the query has syntax errors or is otherwise malformed\&.
.br
\fIQueryRuntimeException\fP Thrown when runtime errors occur during query execution, such as invalid arguments or operational failures\&.
.br
\fIAbortException\fP Thrown when the FQL \fRabort\fP function is called within the query, containing the data provided during the abort operation\&.
.br
\fIInvalidRequestException\fP Thrown for improperly formatted requests or requests that \fBFauna\fP cannot process\&.
.br
\fIContendedTransactionException\fP Thrown when a transaction is aborted due to concurrent modification or contention issues\&.
.br
\fIThrottlingException\fP Thrown when the query exceeds established rate limits for the \fBFauna\fP service\&.
.br
\fIQueryTimeoutException\fP Thrown when the query execution time exceeds the specified or default timeout period\&.
.br
\fIServiceException\fP Thrown in response to internal \fBFauna\fP service errors, indicating issues on the server side\&.
.br
\fIFaunaException\fP Thrown for unexpected or miscellaneous errors not covered by the other specific exception types\&.
.RE
.PP

.PP
Implemented in \fBFauna\&.BaseClient\fP\&.
.SS "IAsyncEnumerable< Page< T > > \fBFauna\&.IClient\&.PaginateAsync\fP< T > (Page< T > page, \fBISerializer\fP< T > elemSerializer, \fBQueryOptions\fP? queryOptions = \fRnull\fP, CancellationToken cancel = \fRdefault\fP)"

.PP
Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. The provided page is the first page yielded\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP The type of the data expected in each page\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIpage\fP The initial page\&.
.br
\fIelemSerializer\fP A data serializer for the page element type\&.
.br
\fIqueryOptions\fP Optional parameters to customize the query execution, such as timeout settings and custom headers\&.
.br
\fIcancel\fP A cancellation token to use\&.
.RE
.PP
\fBReturns\fP
.RS 4
An asynchronous enumerable of pages, each containing a list of items of type \fIT\fP \&.
.RE
.PP

.PP
This method handles pagination by sending multiple requests to \fBFauna\fP as needed, based on the presence of an 'after' cursor in the query results\&. 

.PP
\fBExceptions\fP
.RS 4
\fIAuthenticationException\fP Thrown when authentication fails due to invalid credentials or other authentication issues\&.
.br
\fIAuthorizationException\fP Thrown when the client lacks sufficient permissions to execute the query\&.
.br
\fIQueryCheckException\fP Thrown when the query has syntax errors or is otherwise malformed\&.
.br
\fIQueryRuntimeException\fP Thrown when runtime errors occur during query execution, such as invalid arguments or operational failures\&.
.br
\fIAbortException\fP Thrown when the FQL \fRabort\fP function is called within the query, containing the data provided during the abort operation\&.
.br
\fIInvalidRequestException\fP Thrown for improperly formatted requests or requests that \fBFauna\fP cannot process\&.
.br
\fIContendedTransactionException\fP Thrown when a transaction is aborted due to concurrent modification or contention issues\&.
.br
\fIThrottlingException\fP Thrown when the query exceeds established rate limits for the \fBFauna\fP service\&.
.br
\fIQueryTimeoutException\fP Thrown when the query execution time exceeds the specified or default timeout period\&.
.br
\fIServiceException\fP Thrown in response to internal \fBFauna\fP service errors, indicating issues on the server side\&.
.br
\fIFaunaException\fP Thrown for unexpected or miscellaneous errors not covered by the other specific exception types\&.
.RE
.PP

.PP
Implemented in \fBFauna\&.BaseClient\fP\&.
.SS "IAsyncEnumerable< Page< T > > \fBFauna\&.IClient\&.PaginateAsync\fP< T > (Page< T > page, \fBQueryOptions\fP? queryOptions = \fRnull\fP, CancellationToken cancel = \fRdefault\fP)"

.PP
Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. The provided page is the first page yielded\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP The type of the data expected in each page\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIpage\fP The initial page\&.
.br
\fIqueryOptions\fP Optional parameters to customize the query execution, such as timeout settings and custom headers\&.
.br
\fIcancel\fP A cancellation token to use\&.
.RE
.PP
\fBReturns\fP
.RS 4
An asynchronous enumerable of pages, each containing a list of items of type \fIT\fP \&.
.RE
.PP

.PP
This method handles pagination by sending multiple requests to \fBFauna\fP as needed, based on the presence of an 'after' cursor in the query results\&. 

.PP
\fBExceptions\fP
.RS 4
\fIAuthenticationException\fP Thrown when authentication fails due to invalid credentials or other authentication issues\&.
.br
\fIAuthorizationException\fP Thrown when the client lacks sufficient permissions to execute the query\&.
.br
\fIQueryCheckException\fP Thrown when the query has syntax errors or is otherwise malformed\&.
.br
\fIQueryRuntimeException\fP Thrown when runtime errors occur during query execution, such as invalid arguments or operational failures\&.
.br
\fIAbortException\fP Thrown when the FQL \fRabort\fP function is called within the query, containing the data provided during the abort operation\&.
.br
\fIInvalidRequestException\fP Thrown for improperly formatted requests or requests that \fBFauna\fP cannot process\&.
.br
\fIContendedTransactionException\fP Thrown when a transaction is aborted due to concurrent modification or contention issues\&.
.br
\fIThrottlingException\fP Thrown when the query exceeds established rate limits for the \fBFauna\fP service\&.
.br
\fIQueryTimeoutException\fP Thrown when the query execution time exceeds the specified or default timeout period\&.
.br
\fIServiceException\fP Thrown in response to internal \fBFauna\fP service errors, indicating issues on the server side\&.
.br
\fIFaunaException\fP Thrown for unexpected or miscellaneous errors not covered by the other specific exception types\&.
.RE
.PP

.PP
Implemented in \fBFauna\&.BaseClient\fP\&.
.PP
\fBType Constraints\fP
.TP
\fIT\fP : \fInotnull\fP
.SS "IAsyncEnumerable< Page< T > > \fBFauna\&.IClient\&.PaginateAsync\fP< T > (\fBQuery\fP query, \fBISerializer\fP< T > elemSerializer, \fBQueryOptions\fP? queryOptions = \fRnull\fP, CancellationToken cancel = \fRdefault\fP)"

.PP
Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP The type of the data expected in each page\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIquery\fP The FQL query object representing the query to be executed against the \fBFauna\fP database\&.
.br
\fIelemSerializer\fP A data serializer for the page element type\&.
.br
\fIqueryOptions\fP Optional parameters to customize the query execution, such as timeout settings and custom headers\&.
.br
\fIcancel\fP A cancellation token to use\&.
.RE
.PP
\fBReturns\fP
.RS 4
An asynchronous enumerable of pages, each containing a list of items of type \fIT\fP \&.
.RE
.PP

.PP
This method handles pagination by sending multiple requests to \fBFauna\fP as needed, based on the presence of an 'after' cursor in the query results\&. 

.PP
\fBExceptions\fP
.RS 4
\fIAuthenticationException\fP Thrown when authentication fails due to invalid credentials or other authentication issues\&.
.br
\fIAuthorizationException\fP Thrown when the client lacks sufficient permissions to execute the query\&.
.br
\fIQueryCheckException\fP Thrown when the query has syntax errors or is otherwise malformed\&.
.br
\fIQueryRuntimeException\fP Thrown when runtime errors occur during query execution, such as invalid arguments or operational failures\&.
.br
\fIAbortException\fP Thrown when the FQL \fRabort\fP function is called within the query, containing the data provided during the abort operation\&.
.br
\fIInvalidRequestException\fP Thrown for improperly formatted requests or requests that \fBFauna\fP cannot process\&.
.br
\fIContendedTransactionException\fP Thrown when a transaction is aborted due to concurrent modification or contention issues\&.
.br
\fIThrottlingException\fP Thrown when the query exceeds established rate limits for the \fBFauna\fP service\&.
.br
\fIQueryTimeoutException\fP Thrown when the query execution time exceeds the specified or default timeout period\&.
.br
\fIServiceException\fP Thrown in response to internal \fBFauna\fP service errors, indicating issues on the server side\&.
.br
\fIFaunaException\fP Thrown for unexpected or miscellaneous errors not covered by the other specific exception types\&.
.RE
.PP

.PP
Implemented in \fBFauna\&.BaseClient\fP\&.
.SS "IAsyncEnumerable< Page< T > > \fBFauna\&.IClient\&.PaginateAsync\fP< T > (\fBQuery\fP query, \fBQueryOptions\fP? queryOptions = \fRnull\fP, CancellationToken cancel = \fRdefault\fP)"

.PP
Asynchronously iterates over pages of a \fBFauna\fP query result, automatically fetching subsequent pages using the 'after' cursor\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP The type of the data expected in each page\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIquery\fP The FQL query object representing the query to be executed against the \fBFauna\fP database\&.
.br
\fIqueryOptions\fP Optional parameters to customize the query execution, such as timeout settings and custom headers\&.
.br
\fIcancel\fP A cancellation token to use\&.
.RE
.PP
\fBReturns\fP
.RS 4
An asynchronous enumerable of pages, each containing a list of items of type \fIT\fP \&.
.RE
.PP

.PP
This method handles pagination by sending multiple requests to \fBFauna\fP as needed, based on the presence of an 'after' cursor in the query results\&. 

.PP
\fBExceptions\fP
.RS 4
\fIAuthenticationException\fP Thrown when authentication fails due to invalid credentials or other authentication issues\&.
.br
\fIAuthorizationException\fP Thrown when the client lacks sufficient permissions to execute the query\&.
.br
\fIQueryCheckException\fP Thrown when the query has syntax errors or is otherwise malformed\&.
.br
\fIQueryRuntimeException\fP Thrown when runtime errors occur during query execution, such as invalid arguments or operational failures\&.
.br
\fIAbortException\fP Thrown when the FQL \fRabort\fP function is called within the query, containing the data provided during the abort operation\&.
.br
\fIInvalidRequestException\fP Thrown for improperly formatted requests or requests that \fBFauna\fP cannot process\&.
.br
\fIContendedTransactionException\fP Thrown when a transaction is aborted due to concurrent modification or contention issues\&.
.br
\fIThrottlingException\fP Thrown when the query exceeds established rate limits for the \fBFauna\fP service\&.
.br
\fIQueryTimeoutException\fP Thrown when the query execution time exceeds the specified or default timeout period\&.
.br
\fIServiceException\fP Thrown in response to internal \fBFauna\fP service errors, indicating issues on the server side\&.
.br
\fIFaunaException\fP Thrown for unexpected or miscellaneous errors not covered by the other specific exception types\&.
.RE
.PP

.PP
Implemented in \fBFauna\&.BaseClient\fP\&.
.PP
\fBType Constraints\fP
.TP
\fIT\fP : \fInotnull\fP
.SS "Task< \fBQuerySuccess\fP< object?> > Fauna\&.IClient\&.QueryAsync (\fBQuery\fP query, \fBISerializer\fP serializer, \fBQueryOptions\fP? queryOptions = \fRnull\fP, CancellationToken cancel = \fRdefault\fP)"

.PP
Asynchronously executes a specified FQL query against the \fBFauna\fP database and returns the typed result\&. 
.PP
\fBParameters\fP
.RS 4
\fIquery\fP The FQL query object representing the query to be executed against the \fBFauna\fP database\&.
.br
\fIserializer\fP A serializer for the success data type\&.
.br
\fIqueryOptions\fP Optional parameters to customize the query execution, such as timeout settings and custom headers\&.
.br
\fIcancel\fP A cancellation toke to use\&.
.RE
.PP
\fBReturns\fP
.RS 4
A Task representing the asynchronous operation, which upon completion contains the result of the query execution\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIAuthenticationException\fP Thrown when authentication fails due to invalid credentials or other authentication issues\&.
.br
\fIAuthorizationException\fP Thrown when the client lacks sufficient permissions to execute the query\&.
.br
\fIQueryCheckException\fP Thrown when the query has syntax errors or is otherwise malformed\&.
.br
\fIQueryRuntimeException\fP Thrown when runtime errors occur during query execution, such as invalid arguments or operational failures\&.
.br
\fIAbortException\fP Thrown when the FQL \fRabort\fP function is called within the query, containing the data provided during the abort operation\&.
.br
\fIInvalidRequestException\fP Thrown for improperly formatted requests or requests that \fBFauna\fP cannot process\&.
.br
\fIContendedTransactionException\fP Thrown when a transaction is aborted due to concurrent modification or contention issues\&.
.br
\fIThrottlingException\fP Thrown when the query exceeds established rate limits for the \fBFauna\fP service\&.
.br
\fIQueryTimeoutException\fP Thrown when the query execution time exceeds the specified or default timeout period\&.
.br
\fIServiceException\fP Thrown in response to internal \fBFauna\fP service errors, indicating issues on the server side\&.
.br
\fIFaunaException\fP Thrown for unexpected or miscellaneous errors not covered by the other specific exception types\&.
.RE
.PP

.PP
Implemented in \fBFauna\&.BaseClient\fP\&.
.SS "Task< \fBQuerySuccess\fP< object?> > Fauna\&.IClient\&.QueryAsync (\fBQuery\fP query, \fBQueryOptions\fP? queryOptions = \fRnull\fP, CancellationToken cancel = \fRdefault\fP)"

.PP
Asynchronously executes a specified FQL query against the \fBFauna\fP database\&. 
.PP
\fBParameters\fP
.RS 4
\fIquery\fP The FQL query object representing the query to be executed against the \fBFauna\fP database\&.
.br
\fIqueryOptions\fP Optional parameters to customize the query execution, such as timeout settings and custom headers\&.
.br
\fIcancel\fP A cancellation token to use\&.
.RE
.PP
\fBReturns\fP
.RS 4
A Task representing the asynchronous operation, which upon completion contains the result of the query execution\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIAuthenticationException\fP Thrown when authentication fails due to invalid credentials or other authentication issues\&.
.br
\fIAuthorizationException\fP Thrown when the client lacks sufficient permissions to execute the query\&.
.br
\fIQueryCheckException\fP Thrown when the query has syntax errors or is otherwise malformed\&.
.br
\fIQueryRuntimeException\fP Thrown when runtime errors occur during query execution, such as invalid arguments or operational failures\&.
.br
\fIAbortException\fP Thrown when the FQL \fRabort\fP function is called within the query, containing the data provided during the abort operation\&.
.br
\fIInvalidRequestException\fP Thrown for improperly formatted requests or requests that \fBFauna\fP cannot process\&.
.br
\fIContendedTransactionException\fP Thrown when a transaction is aborted due to concurrent modification or contention issues\&.
.br
\fIThrottlingException\fP Thrown when the query exceeds established rate limits for the \fBFauna\fP service\&.
.br
\fIQueryTimeoutException\fP Thrown when the query execution time exceeds the specified or default timeout period\&.
.br
\fIServiceException\fP Thrown in response to internal \fBFauna\fP service errors, indicating issues on the server side\&.
.br
\fIFaunaException\fP Thrown for unexpected or miscellaneous errors not covered by the other specific exception types\&.
.RE
.PP

.PP
Implemented in \fBFauna\&.BaseClient\fP\&.
.SS "Task< \fBQuerySuccess\fP< T > > \fBFauna\&.IClient\&.QueryAsync\fP< T > (\fBQuery\fP query, \fBISerializer\fP< T > serializer, \fBQueryOptions\fP? queryOptions = \fRnull\fP, CancellationToken cancel = \fRdefault\fP)"

.PP
Asynchronously executes a specified FQL query against the \fBFauna\fP database and returns the typed result\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP The type of the result expected from the query, corresponding to the structure of the FQL query's expected response\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIquery\fP The FQL query object representing the query to be executed against the \fBFauna\fP database\&.
.br
\fIserializer\fP A serializer for the success data type\&.
.br
\fIqueryOptions\fP Optional parameters to customize the query execution, such as timeout settings and custom headers\&.
.br
\fIcancel\fP A cancellation token to use\&.
.RE
.PP
\fBReturns\fP
.RS 4
A Task representing the asynchronous operation, which upon completion contains the result of the query execution as QuerySuccess<T>\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIAuthenticationException\fP Thrown when authentication fails due to invalid credentials or other authentication issues\&.
.br
\fIAuthorizationException\fP Thrown when the client lacks sufficient permissions to execute the query\&.
.br
\fIQueryCheckException\fP Thrown when the query has syntax errors or is otherwise malformed\&.
.br
\fIQueryRuntimeException\fP Thrown when runtime errors occur during query execution, such as invalid arguments or operational failures\&.
.br
\fIAbortException\fP Thrown when the FQL \fRabort\fP function is called within the query, containing the data provided during the abort operation\&.
.br
\fIInvalidRequestException\fP Thrown for improperly formatted requests or requests that \fBFauna\fP cannot process\&.
.br
\fIContendedTransactionException\fP Thrown when a transaction is aborted due to concurrent modification or contention issues\&.
.br
\fIThrottlingException\fP Thrown when the query exceeds established rate limits for the \fBFauna\fP service\&.
.br
\fIQueryTimeoutException\fP Thrown when the query execution time exceeds the specified or default timeout period\&.
.br
\fIServiceException\fP Thrown in response to internal \fBFauna\fP service errors, indicating issues on the server side\&.
.br
\fIFaunaException\fP Thrown for unexpected or miscellaneous errors not covered by the other specific exception types\&.
.RE
.PP

.PP
Implemented in \fBFauna\&.BaseClient\fP\&.
.SS "Task< \fBQuerySuccess\fP< T > > \fBFauna\&.IClient\&.QueryAsync\fP< T > (\fBQuery\fP query, \fBQueryOptions\fP? queryOptions = \fRnull\fP, CancellationToken cancel = \fRdefault\fP)"

.PP
Asynchronously executes a specified FQL query against the \fBFauna\fP database and returns the typed result\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP The type of the result expected from the query, corresponding to the structure of the FQL query's expected response\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIquery\fP The FQL query object representing the query to be executed against the \fBFauna\fP database\&.
.br
\fIqueryOptions\fP Optional parameters to customize the query execution, such as timeout settings and custom headers\&.
.br
\fIcancel\fP A cancellation token to use
.RE
.PP
\fBReturns\fP
.RS 4
A Task representing the asynchronous operation, which upon completion contains the result of the query execution as QuerySuccess<T>\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIAuthenticationException\fP Thrown when authentication fails due to invalid credentials or other authentication issues\&.
.br
\fIAuthorizationException\fP Thrown when the client lacks sufficient permissions to execute the query\&.
.br
\fIQueryCheckException\fP Thrown when the query has syntax errors or is otherwise malformed\&.
.br
\fIQueryRuntimeException\fP Thrown when runtime errors occur during query execution, such as invalid arguments or operational failures\&.
.br
\fIAbortException\fP Thrown when the FQL \fRabort\fP function is called within the query, containing the data provided during the abort operation\&.
.br
\fIInvalidRequestException\fP Thrown for improperly formatted requests or requests that \fBFauna\fP cannot process\&.
.br
\fIContendedTransactionException\fP Thrown when a transaction is aborted due to concurrent modification or contention issues\&.
.br
\fIThrottlingException\fP Thrown when the query exceeds established rate limits for the \fBFauna\fP service\&.
.br
\fIQueryTimeoutException\fP Thrown when the query execution time exceeds the specified or default timeout period\&.
.br
\fIServiceException\fP Thrown in response to internal \fBFauna\fP service errors, indicating issues on the server side\&.
.br
\fIFaunaException\fP Thrown for unexpected or miscellaneous errors not covered by the other specific exception types\&.
.RE
.PP

.PP
Implemented in \fBFauna\&.BaseClient\fP\&.
.PP
\fBType Constraints\fP
.TP
\fIT\fP : \fInotnull\fP


.SH "Author"
.PP 
Generated automatically by Doxygen for Fauna v10 \&.NET/C# Driver from the source code\&.
